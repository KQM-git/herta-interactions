# override permissions for any command
permissions:
  liveinteraction:
    whitelist: ${ [ ROLES.STAFF, ...getValuesRecursive(ROLES.ADMIN) ] }

  livecommand:
    whitelist: ${ [ ROLES.STAFF, ...getValuesRecursive(ROLES.ADMIN) ] }
#   # Its possible to set permissions for internal commands too.

  role:
    whitelist: >-
      ${ [ 
        ...getValuesRecursive(ROLES.ADMIN), 
        ROLES.TEAM_LEAD, 
      ] }

  serverinfo:
    whitelist: ${ [ ...getValuesRecursive(ROLES.ADMIN) ] }

  # point system
  points/add:
    whitelist: >-
      ${ [ 
          ...getValuesRecursive(ROLES.ADMIN), 
          ROLES.TEAM_LEAD
        ] }

  points/list:
    whitelist: >-
      ${ [ 
          ...getValuesRecursive(ROLES.ADMIN), 
          ROLES.TEAM_LEAD
        ] }

  points/clean: 
    whitelist: ${ [ ...getValuesRecursive(ROLES.ADMIN) ] }

  points/import: 
    whitelist: ${ [ ...getValuesRecursive(ROLES.ADMIN) ] }

  points/get:
    whitelist: >-
      ${ [ 
        ...getValuesRecursive(ROLES.ADMIN), 
        ROLES.STAFF, 
      ] }
#
#   # Its possible to set permissions for custom commands
#   echo:
#     whitelist: ${ [ ...getValuesRecursive(ROLES.ADMIN) ] }
#
#   # Its possible to set permissions for custom commands in folders
#   characters/amber:
#     whitelist: ${ [ ...getValuesRecursive(ROLES.ADMIN) ] }


# Only delete stuff after this line if you know what you're doing.
modules:
  userNotes:
    enabled: true
    permissions:
      whitelist: ${ [ ...getValuesRecursive(ROLES.ADMIN), ...getValuesRecursive(ROLES.MOD) ] }

  pointsSystem:
    enabled: true
    permissions:
      whitelist: ${ [ ...getValuesRecursive(ROLES.ADMIN), ROLES.VERIFIED ] }
        
    loggingChannel: "${ CHANNELS.BOT_LOGGING }"
    
  vanityRoles:
    enabled: false

    # Who can use the /vanityrole command, anyone with MANAGE_ROLES if not set.
    permissions:
      whitelist:
        - "${ ROLES.PATREON_ARCHON }"
        - "${ ROLES.PATREON_ADEPTUS }"

    # Log whenever someone's custom role is updated
    loggingChannel: "${ CHANNELS.BOT_LOGGING }"

    createRoleAfter: "${ ROLES.PATREON_ADEPTUS }"

  reactRoles:
    enabled: false

    # Who can use the /reactroles command, anyone with MANAGE_ROLES if not set.
    permissions:
      whitelist: ${ [ ...getValuesRecursive(ROLES.ADMIN), ...getValuesRecursive(ROLES.TEAM_LEAD) ] }

    configs:
      # randomRole:
      #   title: "Get a random role"
      #   description: |-
      #     Get a random role out of <@&947365141450727495>, <@&947356633737080853>, and <@&947356702318153749>

      #   permissions:
      #     blacklist:
      #       - "947365141450727495"
      #       - "947356633737080853"
      #       - "947356702318153749"
          
      #   reactions:
      #     "pe:946999484175491102":
      #       role: >
      #         ${
      #           const reactionRoles = [
      #             "947365141450727495",
      #             "947356633737080853",
      #             "947356702318153749"
      #           ];

      #           reactionRoles[Math.floor(Math.random() * reactionRoles.length)];
      #         }
      #       description: "Random Role"

      # keqkey:
      #   title: "Keqing's Key"
      #   color: ${ COLORS.ELECTRO_PURPLE }
      #   description:
      #   permissions:
      #     whitelist: >- 
      #       ${ [ 
      #         ...getValuesRecursive(ROLES.ADMIN), 
      #         ROLES.EMISSARY, 
      #         ROLES.HEAD_MILLELITH, 
      #         ROLES.HONORARY_QIXING,
      #         ROLES.VICE_HEAD_MILLELITH 
      #       ] }

      #   reactions:
      #     "love:767201369525321758":
      #       role: "${ ROLES.ADMIN.KEQINGS_KEY }"
      #       description: ":key: Break glass in case of emergency."
            
  modMail:
    enabled: false

    # This restricts who can open a thread. If this is not set, anyone can open a thread by DMing the bot
    #permissions:
    #  whitelist:
    #    - "${ ROLES.VERIFIED }"

    #ignoreRole: "${ ROLES.MODMAIL_IGNORED }"

    channels:
      logging: "${ CHANNELS.MODMAIL_LOGGING }"
      threads: "${ CHANNELS.MODMAIL_THREADS }"

  # Role kits
  roleKits:
    enabled: false

    # This restricts who can use the /rolekits command. if its not set, anyone with the MANAGE_ROLES permission can use the command.
    permissions: 
      whitelist: ${ [ ...getValuesRecursive(ROLES.ADMIN), ROLES.PILLAR_STAFF, ROLES.THE_TRADES, ROLES.STAFF.WANGSHENG_SCHOLAR, ROLES.STAFF.WANGSHENG_EDITOR, ROLES.VERIFIED ] }

    # The kits that are available
    kits:  
      wangshengcoffin:
        exportAsCommand: true
        name: Wangsheng Coffin
        permissions: 
          whitelist: ${ [ ...getValuesRecursive(ROLES.ADMIN), ROLES.MOD.MILLELITH, ROLES.MOD.WANGSHENG, ROLES.WANGSHENG_DIRECTOR, ROLES.WANGSHENG_ASST_DIRECTOR ] }
        addRoles:
          - "${ ROLES.WANGSHENG_COFFIN }"
        removeRoles:
          - "${ ROLES.THEORYCRAFTER }"
          - "${ ROLES.THEORYHUNTER }"
          - "${ ROLES.LIBRARY_SUBMISSIONS }"
          - "${ ROLES.GUIDE_SUBMISSIONS }"

      removewangshengcoffin:
        exportAsCommand: true
        name: Remove Wangsheng Coffin
        permissions: 
          whitelist: ${ [ ...getValuesRecursive(ROLES.ADMIN), ROLES.MOD.MILLELITH, ROLES.MOD.WANGSHENG, ROLES.WANGSHENG_DIRECTOR, ROLES.WANGSHENG_ASST_DIRECTOR ] }
        removeRoles:
          - "${ ROLES.WANGSHENG_COFFIN }"
      

      guhuacoffin:
        exportAsCommand: true
        name: Guhua Exile
        permissions: 
          whitelist: ${ [ ...getValuesRecursive(ROLES.ADMIN), ROLES.MOD.MILLELITH, ROLES.MOD.GUHUA, ROLES.GUHUA_GUIDE_GRANDMASTER ] }
        addRoles:
          - "${ ROLES.GUHUA_EXILE }"

      removeguhuacoffin:
        exportAsCommand: true
        name: Remove Guhua Exile
        permissions: 
          whitelist: ${ [ ...getValuesRecursive(ROLES.ADMIN), ROLES.MOD.MILLELITH, ROLES.MOD.GUHUA, ROLES.GUHUA_GUIDE_GRANDMASTER ] }
        removeRoles:
          - "${ ROLES.GUHUA_EXILE }"

      offtopiccoffin:
        exportAsCommand: true
        name: Offtopic Coffin
        permissions: 
          whitelist: ${ [ ...getValuesRecursive(ROLES.ADMIN), ROLES.MOD.MILLELITH, ROLES.YUEHAI_LEAKS_HEAD ] }
        addRoles:
          - "${ ROLES.OFFTOPIC_COFFIN }"
        removeRoles:
          - "${ ROLES.OFFTOPIC }"
          - "${ ROLES.OFFTOPIC_PING }"

      removeofftopiccoffin:
        exportAsCommand: true
        name: Remove Offtopic Coffin
        permissions: 
          whitelist: ${ [ ...getValuesRecursive(ROLES.ADMIN), ROLES.MOD.MILLELITH, ROLES.YUEHAI_LEAKS_HEAD ] }
        removeRoles:
          - "${ ROLES.OFFTOPIC_COFFIN }"

      contributor:
        exportAsCommand: true
        name: Wangsheng Contributor
        permissions:
          whitelist: ${ [ ...getValuesRecursive(ROLES.ADMIN), ROLES.STAFF.WANGSHENG_SCHOLAR, ROLES.STAFF.WANGSHENG_EDITOR, ROLES.WANGSHENG_DIRECTOR, ROLES.WANGSHENG_ASST_DIRECTOR] }
        addRoles:
          - "${ ROLES.WANGSHENG_CONTRIBUTOR }"
          
      theoryhunter:
        exportAsCommand: true
        name: Wangsheng Theoryhunter
        permissions:
          whitelist: ${ [ ...getValuesRecursive(ROLES.ADMIN), ROLES.STAFF.WANGSHENG_SCHOLAR, ROLES.STAFF.WANGSHENG_EDITOR, ROLES.WANGSHENG_DIRECTOR, ROLES.WANGSHENG_ASST_DIRECTOR ] }
        addRoles:
          - "${ ROLES.WANGSHENG_THEORYHUNTER }"

      theorycrafter:
        exportAsCommand: true
        name: Wangsheng Theorycrafter
        permissions:
          whitelist: ${ [ ...getValuesRecursive(ROLES.ADMIN), ROLES.WANGSHENG_DIRECTOR, ROLES.WANGSHENG_ASST_DIRECTOR ] }
        addRoles:
          - "${ ROLES.WANGSHENG_THEORYCRAFTER }"

      whale:
        exportAsCommand: true
        name: WhaleBTW
        permissions:
          whitelist: ${ [ ...getValuesRecursive(ROLES.ADMIN) ] }
        addRoles:
          - "${ ROLES.WHALEBTW }"

      kqm:
        exportAsCommand: true
        name: KeqingMain
        permissions:
          whitelist: ${ [ ...getValuesRecursive(ROLES.ADMIN) ] }
        addRoles:
          - "${ ROLES.KEQINGMAIN }"

  # Verification Module
  verification:
    enabled: false

    # This restricts who can use the /verification command. if its not set, anyone can use the command.
    permissions:
      whitelist: ${ [ ...getValuesRecursive(ROLES.ADMIN) ] }

    # This sets the channel to use for sending the initialMessage into. If this is not set then the bot will not automatically send the welcome message.
    # welcomeChannel: "${  CHANNELS.WELCOME  }"

    # The role to add to users when they successfully accept the rules.
    verifiedRole: 
      - "${ ROLES.VERIFIED }"
      - "${ ROLES.MEDIA }"

    interactions:
      # You can use this to set a different greeting message. If this is not set then initialMessage is used.
      greetingsMessageInteractionPath: "verification/initial_message"

      # The initial message displayed when the /verification is run.
      initialMessageInteractionPath: "verification/initial_message"

      # The interaction to display when the user presses the verification button.
      rulesAcknowledgementInteractionPath: "verification/rules_acknowledgement"

    # Verification button settings
    button:
      title: "Verify"
      type: "PRIMARY"

  supportThreads:
    enabled: false

    # This restricts who can use the /supportthreads command. if its not set, anyone with MANAGE_THREADS permission can use the command.
    permissions:
      whitelist: ${ [ ...getValuesRecursive(ROLES.ADMIN) ] }

    configs:
      main:
        # The interaction to display when the command is run.
        displayInteractionPath: "verification/arte_test"

        # The interaction to display when someone interacts with the supportThreadButton
        supportThreadConfirmationInteractionPath: "verification/arte_test"

        # The interaction to send in the opened thread
        supportThreadDisplayInteractionPath: "verification/arte_test"

        # The channel to open the thread in
        supportThreadChannel: "945738093766533140"

        # Configure the button to open a support thread, if this is not set then a button with the label "HELP" is used
        supportThreadButton:
          title: "HELP"
          type: "PRIMARY"

        # Interaction to display when the user clicks the troubleshootButton
        troubleshootInteractionPath: "verification/arte_test"

        # An optional button that displays an interaction upon clicking. if this is not set, no button is displayed
        troubleshootButton:
          title: "TROUBLESHOOT"
          type: "SUCCESS"

      guhuafeedback:
        # The interaction to display when the command is run.
        displayInteractionPath: "verification/guhua_feedback"

        # The interaction to display when someone interacts with the supportThreadButton
        supportThreadConfirmationInteractionPath: "verification/guhua_feedback_confirmation"

        # The interaction to send in the opened thread
        supportThreadDisplayInteractionPath: "verification/guhua_feedback_thread"

        # The channel to open the thread in
        supportThreadChannel: "${ CHANNELS.GUHUA_FEEDBACK }"

        # Configure the button to open a support thread, if this is not set then a button with the label "HELP" is used
        supportThreadButton:
          title: "Leave Feedback"
          type: "PRIMARY"

